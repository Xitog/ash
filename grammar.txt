24 Mots clés :
    2: var?, const
    5: if, then, else, elsif, end
    3: while, do, loop
    2: for, in
    1: until?
    2: break, next
    3: fun, pro, return
    1: import
    2: raise?, catch? => replace by if/return
    3: and, or, not
Si on ne considère pas les "?" (=> fusion exception, flux normal) on tombe à 20.
Manque : static, enum

Opérateurs :
    1 > extraction d'import, type de retour des fonctions
    1 < héritage
    1 = affectation
    6 +=, -=, *=, **=, /=, //= affectation+mathématique
    6 +, -, *, **, /, // mathématiques
    1 . call
    6 ==, !=, >, >=, <=, < comparaison

Séparateurs :
    2 {, } dictionnaire
    2 (, ) appel de fonction
    2 [, ] liste

Dans les dict : ou = ?
Typage : avec ou sans : ?

-- comment
--[[ multiline
--]]

[var] ID [TYPE] = EXPR
const ID [TYPE] = EXPR

[1, 2, 3]            list (dynamic size)
{1: "abc", 2: "cde"} dict/table
{1, 2, 3}            array (fixed size)
true / false         boolean/bool
1 2                  integer/int
3.4                  number/num
"abc" 'abc'          string/str
class Point          object (fixed fields)/obj
   x int
   y int
end
nil                  null value
@attr                instance attribute
$attr                class attribute (en Ruby pour global et @@ pour class)

expression :
    exp op exp
    op exp
    exp if cond else exp
    [exp for id in exp if cond] ou [for id in exp if cond return exp]

--

if CONDITION then
    ACTION
[elsif CONDITION then
    ACTION]*
[else
    ACTION]
end

ACTION if CONDITION

EXPRESSION if CONDITION else EXPRESSION

--

[label] while CONDITION do
    ACTION
loop [label]

[label] for ID1[, ID2] in ITERABLE [if CONDITION] [while CONDITION] [do
    ACTION]
loop [label]

[label] do
    ACTION
until CONDITION loop [label]

[label] do
    ACTION
loop [label]

break [label]
next [label]

--

fun[ction] ID (P1 [T1], P2 [T2] [> TYPE]) ou multitypes?
    ACTION
end

pro[cedure] ID (P1 [T1], P2 [T2])
    ACTION
end

return [EXPR]

--

class ID [< SUPER]
    [static const, static var, var] ID = EXPR
    [static] fun or pro
    pro init(@a int, b int)
        @b = b
    end
end

a = ID.new(param)

--

ID [module] = import (FILEPATH | ID) [ > ID1, ID2 ]

module ID (en tête de fichier, pas de fin) (plutôt que package ou namespace)

--

exception

raise EXPR

catch [ID] TYPE
end

--

+  -  *  /  //  **  %
+= -= *= /= //= **= %=
=
<< >> (binary)
# (length)
$ (string)
and or not
== != <= >= < >
${x} interpolation dans chaînes
in

Un label : |label| ou :label:

14/12/2022
- import (FILEPATH | ID) [ > ID1, ID2 ] alternate require
25/10/2022
05/05/2023 d'après une révision du 02/05/2023
- if CONDITION => ACTION changed to ACTION if CONDITION
- EXPRESSION if CONDITION else EXPRESSION added
- loop changed to loop [label]
- until CONDITION loop changed to until CONDITION loop [label]
- break [break] changed to break [label]
- next changed to next [label]
- fun[ction] ID (P1 [T1], P2 [T2]) TYPE alternate fun[ction] ID (P1 [T1], P2 [T2] -> TYPE)
- throw added
- catch ID [TYPE] changed to catch [ID] TYPE
11/05/2023
- do action loop chand to do action loop [label]
- fun[ction] ID (P1 [T1], P2 [T2]) TYPE changed to fun[ction] ID (P1 [T1], P2 [T2] [> TYPE])
- throw change to raise
- Added literals for list, dict, array, boolean, integer, number, str, obj, nil
01/08/2023
- Fusionner le flux normal avec celui des exceptions. Vu le 25/08 que CLU fait ainsi
